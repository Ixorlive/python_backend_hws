// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: bets_service.proto

package betservicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BetsClient is the client API for Bets service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BetsClient interface {
	PlaceBet(ctx context.Context, in *PlaceBetRequest, opts ...grpc.CallOption) (*Confirmation, error)
	CalculateOdds(ctx context.Context, in *CalculateOddsRequest, opts ...grpc.CallOption) (*CalculateOddsResponse, error)
}

type betsClient struct {
	cc grpc.ClientConnInterface
}

func NewBetsClient(cc grpc.ClientConnInterface) BetsClient {
	return &betsClient{cc}
}

func (c *betsClient) PlaceBet(ctx context.Context, in *PlaceBetRequest, opts ...grpc.CallOption) (*Confirmation, error) {
	out := new(Confirmation)
	err := c.cc.Invoke(ctx, "/bets.Bets/PlaceBet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *betsClient) CalculateOdds(ctx context.Context, in *CalculateOddsRequest, opts ...grpc.CallOption) (*CalculateOddsResponse, error) {
	out := new(CalculateOddsResponse)
	err := c.cc.Invoke(ctx, "/bets.Bets/CalculateOdds", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BetsServer is the server API for Bets service.
// All implementations must embed UnimplementedBetsServer
// for forward compatibility
type BetsServer interface {
	PlaceBet(context.Context, *PlaceBetRequest) (*Confirmation, error)
	CalculateOdds(context.Context, *CalculateOddsRequest) (*CalculateOddsResponse, error)
	mustEmbedUnimplementedBetsServer()
}

// UnimplementedBetsServer must be embedded to have forward compatible implementations.
type UnimplementedBetsServer struct {
}

func (UnimplementedBetsServer) PlaceBet(context.Context, *PlaceBetRequest) (*Confirmation, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PlaceBet not implemented")
}
func (UnimplementedBetsServer) CalculateOdds(context.Context, *CalculateOddsRequest) (*CalculateOddsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CalculateOdds not implemented")
}
func (UnimplementedBetsServer) mustEmbedUnimplementedBetsServer() {}

// UnsafeBetsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BetsServer will
// result in compilation errors.
type UnsafeBetsServer interface {
	mustEmbedUnimplementedBetsServer()
}

func RegisterBetsServer(s grpc.ServiceRegistrar, srv BetsServer) {
	s.RegisterService(&Bets_ServiceDesc, srv)
}

func _Bets_PlaceBet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PlaceBetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsServer).PlaceBet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bets.Bets/PlaceBet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsServer).PlaceBet(ctx, req.(*PlaceBetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Bets_CalculateOdds_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CalculateOddsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BetsServer).CalculateOdds(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bets.Bets/CalculateOdds",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BetsServer).CalculateOdds(ctx, req.(*CalculateOddsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Bets_ServiceDesc is the grpc.ServiceDesc for Bets service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Bets_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "bets.Bets",
	HandlerType: (*BetsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PlaceBet",
			Handler:    _Bets_PlaceBet_Handler,
		},
		{
			MethodName: "CalculateOdds",
			Handler:    _Bets_CalculateOdds_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bets_service.proto",
}
