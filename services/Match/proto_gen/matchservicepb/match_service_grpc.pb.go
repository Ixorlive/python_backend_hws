// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.3
// source: match_service.proto

package matchservicepb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MatchServiceClient is the client API for MatchService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MatchServiceClient interface {
	AddMatch(ctx context.Context, in *AddMatchRequest, opts ...grpc.CallOption) (*MatchResponse, error)
	UpdateMatchTime(ctx context.Context, in *UpdateMatchTimeRequest, opts ...grpc.CallOption) (*MatchResponse, error)
	MarkMatchAsCompleted(ctx context.Context, in *MarkMatchRequest, opts ...grpc.CallOption) (*MatchResponse, error)
	ListMatches(ctx context.Context, in *ListMatchesRequest, opts ...grpc.CallOption) (*ListMatchesResponse, error)
}

type matchServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMatchServiceClient(cc grpc.ClientConnInterface) MatchServiceClient {
	return &matchServiceClient{cc}
}

func (c *matchServiceClient) AddMatch(ctx context.Context, in *AddMatchRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, "/matchservice.MatchService/AddMatch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) UpdateMatchTime(ctx context.Context, in *UpdateMatchTimeRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, "/matchservice.MatchService/UpdateMatchTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) MarkMatchAsCompleted(ctx context.Context, in *MarkMatchRequest, opts ...grpc.CallOption) (*MatchResponse, error) {
	out := new(MatchResponse)
	err := c.cc.Invoke(ctx, "/matchservice.MatchService/MarkMatchAsCompleted", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *matchServiceClient) ListMatches(ctx context.Context, in *ListMatchesRequest, opts ...grpc.CallOption) (*ListMatchesResponse, error) {
	out := new(ListMatchesResponse)
	err := c.cc.Invoke(ctx, "/matchservice.MatchService/ListMatches", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MatchServiceServer is the server API for MatchService service.
// All implementations must embed UnimplementedMatchServiceServer
// for forward compatibility
type MatchServiceServer interface {
	AddMatch(context.Context, *AddMatchRequest) (*MatchResponse, error)
	UpdateMatchTime(context.Context, *UpdateMatchTimeRequest) (*MatchResponse, error)
	MarkMatchAsCompleted(context.Context, *MarkMatchRequest) (*MatchResponse, error)
	ListMatches(context.Context, *ListMatchesRequest) (*ListMatchesResponse, error)
	mustEmbedUnimplementedMatchServiceServer()
}

// UnimplementedMatchServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMatchServiceServer struct {
}

func (UnimplementedMatchServiceServer) AddMatch(context.Context, *AddMatchRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddMatch not implemented")
}
func (UnimplementedMatchServiceServer) UpdateMatchTime(context.Context, *UpdateMatchTimeRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateMatchTime not implemented")
}
func (UnimplementedMatchServiceServer) MarkMatchAsCompleted(context.Context, *MarkMatchRequest) (*MatchResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MarkMatchAsCompleted not implemented")
}
func (UnimplementedMatchServiceServer) ListMatches(context.Context, *ListMatchesRequest) (*ListMatchesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListMatches not implemented")
}
func (UnimplementedMatchServiceServer) mustEmbedUnimplementedMatchServiceServer() {}

// UnsafeMatchServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MatchServiceServer will
// result in compilation errors.
type UnsafeMatchServiceServer interface {
	mustEmbedUnimplementedMatchServiceServer()
}

func RegisterMatchServiceServer(s grpc.ServiceRegistrar, srv MatchServiceServer) {
	s.RegisterService(&MatchService_ServiceDesc, srv)
}

func _MatchService_AddMatch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).AddMatch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchservice.MatchService/AddMatch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).AddMatch(ctx, req.(*AddMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_UpdateMatchTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMatchTimeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).UpdateMatchTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchservice.MatchService/UpdateMatchTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).UpdateMatchTime(ctx, req.(*UpdateMatchTimeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_MarkMatchAsCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MarkMatchRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).MarkMatchAsCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchservice.MatchService/MarkMatchAsCompleted",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).MarkMatchAsCompleted(ctx, req.(*MarkMatchRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MatchService_ListMatches_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListMatchesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MatchServiceServer).ListMatches(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/matchservice.MatchService/ListMatches",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MatchServiceServer).ListMatches(ctx, req.(*ListMatchesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MatchService_ServiceDesc is the grpc.ServiceDesc for MatchService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MatchService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "matchservice.MatchService",
	HandlerType: (*MatchServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddMatch",
			Handler:    _MatchService_AddMatch_Handler,
		},
		{
			MethodName: "UpdateMatchTime",
			Handler:    _MatchService_UpdateMatchTime_Handler,
		},
		{
			MethodName: "MarkMatchAsCompleted",
			Handler:    _MatchService_MarkMatchAsCompleted_Handler,
		},
		{
			MethodName: "ListMatches",
			Handler:    _MatchService_ListMatches_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "match_service.proto",
}
