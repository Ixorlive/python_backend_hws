# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import proto_gen.match_service_pb2 as match__service__pb2


class MatchServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AddMatch = channel.unary_unary(
            "/matchservice.MatchService/AddMatch",
            request_serializer=match__service__pb2.AddMatchRequest.SerializeToString,
            response_deserializer=match__service__pb2.MatchResponse.FromString,
        )
        self.UpdateMatchTime = channel.unary_unary(
            "/matchservice.MatchService/UpdateMatchTime",
            request_serializer=match__service__pb2.UpdateMatchTimeRequest.SerializeToString,
            response_deserializer=match__service__pb2.MatchResponse.FromString,
        )
        self.MarkMatchAsCompleted = channel.unary_unary(
            "/matchservice.MatchService/MarkMatchAsCompleted",
            request_serializer=match__service__pb2.MarkMatchRequest.SerializeToString,
            response_deserializer=match__service__pb2.MatchResponse.FromString,
        )
        self.ListMatches = channel.unary_unary(
            "/matchservice.MatchService/ListMatches",
            request_serializer=match__service__pb2.ListMatchesRequest.SerializeToString,
            response_deserializer=match__service__pb2.ListMatchesResponse.FromString,
        )


class MatchServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AddMatch(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def UpdateMatchTime(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def MarkMatchAsCompleted(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ListMatches(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_MatchServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "AddMatch": grpc.unary_unary_rpc_method_handler(
            servicer.AddMatch,
            request_deserializer=match__service__pb2.AddMatchRequest.FromString,
            response_serializer=match__service__pb2.MatchResponse.SerializeToString,
        ),
        "UpdateMatchTime": grpc.unary_unary_rpc_method_handler(
            servicer.UpdateMatchTime,
            request_deserializer=match__service__pb2.UpdateMatchTimeRequest.FromString,
            response_serializer=match__service__pb2.MatchResponse.SerializeToString,
        ),
        "MarkMatchAsCompleted": grpc.unary_unary_rpc_method_handler(
            servicer.MarkMatchAsCompleted,
            request_deserializer=match__service__pb2.MarkMatchRequest.FromString,
            response_serializer=match__service__pb2.MatchResponse.SerializeToString,
        ),
        "ListMatches": grpc.unary_unary_rpc_method_handler(
            servicer.ListMatches,
            request_deserializer=match__service__pb2.ListMatchesRequest.FromString,
            response_serializer=match__service__pb2.ListMatchesResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "matchservice.MatchService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class MatchService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AddMatch(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/matchservice.MatchService/AddMatch",
            match__service__pb2.AddMatchRequest.SerializeToString,
            match__service__pb2.MatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def UpdateMatchTime(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/matchservice.MatchService/UpdateMatchTime",
            match__service__pb2.UpdateMatchTimeRequest.SerializeToString,
            match__service__pb2.MatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def MarkMatchAsCompleted(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/matchservice.MatchService/MarkMatchAsCompleted",
            match__service__pb2.MarkMatchRequest.SerializeToString,
            match__service__pb2.MatchResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ListMatches(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/matchservice.MatchService/ListMatches",
            match__service__pb2.ListMatchesRequest.SerializeToString,
            match__service__pb2.ListMatchesResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
